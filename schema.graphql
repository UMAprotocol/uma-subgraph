type User @entity {
  id: ID!

  votingTokenBalance: BigDecimal!

  votingTokenBalanceRaw: BigInt!

  votesCommited: [CommitedVote!]! @derivedFrom(field: "voter")

  votesRevealed: [RevealedVote!]! @derivedFrom(field: "voter")

  deployedContracts: [FinancialContract!]! @derivedFrom(field: "deployer")
}

type InterfaceImplementation @entity {
  "Name of the Interface implemented on this contract"
  id: ID!

  address: Bytes!
}

type PriceIdentifier @entity {
  id: ID!

  isSupported: Boolean!

  priceRequests: [PriceRequest!]! @derivedFrom(field: "identifier")
}

type PriceRequest @entity {
  "ID is the PriceIdentifier ID + the timestamp"
  id: ID!

  isResolved: Boolean!

  price: BigInt

  latestRound: PriceRequestRound!

  time: BigInt!

  identifier: PriceIdentifier!

  resolutionTransaction: Bytes

  resolutionTimestamp: BigInt

  resolutionBlock: BigInt

  rounds: [PriceRequestRound!]! @derivedFrom(field: "request")

  commitedVotes: [CommitedVote!]! @derivedFrom(field: "request")

  revealedVotes: [RevealedVote!]! @derivedFrom(field: "request")

  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "request")
}

type PriceRequestRound @entity {
  "ID is the PriceIdentifier ID + the timestamp + the roundId"
  id: ID!

  request: PriceRequest!

  identifier: PriceIdentifier!

  time: BigInt!

  roundId: BigInt!

  snapshotId: BigInt

  totalVotesRevealed: BigInt!

  totalRewardsClaimed: BigInt!

  totalSupplyAtSnapshot: BigInt

  "Ratio of the total supply of tokens that were weighted on this vote"
  tokensWeightedOverTotalSupplyRaw: BigDecimal

  "Percentage of the total supply of tokens that were weighted on this vote"
  tokensWeightedOverTotalSupply: BigDecimal

  commitedVotes: [CommitedVote!]! @derivedFrom(field: "round")

  revealedVotes: [RevealedVote!]! @derivedFrom(field: "round")

  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "round")
}

type CommitedVote @entity {
  "Commited votes won't show the price until a reveal happens and a RevealedVote is created"
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  encryptedVoteData: Bytes

  voter: User!
}

type RevealedVote @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  price: BigInt!

  voter: User!

  numTokens: BigInt!
}

type RewardsClaimed @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  claimer: User!

  numTokens: BigInt!
}

type FinancialContract @entity {
  "Blockchain address of the contract"
  id: ID!

  creator: ContractCreator

  deployer: User

  address: Bytes!

  collateralToken: Token

  collateralRequirement: BigInt

  expirationTimestamp: BigInt

  totalTokensCreated: BigInt!

  positionManagerEvents: [PositionManagerEvent!]! @derivedFrom(field: "contract")

  parties: [Party!]! @derivedFrom(field: "contract")
}

interface PositionManagerEvent {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type PositionCreatedEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type SettleExpiredPositionEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type RedeemEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type DepositEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type WithdrawalEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type ContractCreator @entity {
  "This entity represent a single contract creator (EMP Creator). The id is the blockchain address of the EMPCreator"
  id: ID!

  isRemoved: Boolean!

  manager: Bytes
}

type Party @entity {
  "Address"
  id: ID!

  contract: FinancialContract!

  isRemoved: Boolean!
}

type Store @entity {
  "Entity that stores the global settings (fees, rates, and more)"
  id: ID!

  gatPercentage: BigInt!

  inflationPercentage: BigInt!

  regularFee: BigInt!

  finalFee: BigInt!

  weeklyDelayFee: BigInt!

  totalFeesPaid: BigInt!

  regularFeesPaid: BigInt!

  finalFeesPaid: BigInt!

  events: [StoreEvent!]! @derivedFrom(field: "store")
}

interface StoreEvent {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type FinalFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type RegularFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  regularFee: BigInt!

  lateFee: BigInt!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type Token @entity {
  id: ID!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!

  usedBy: [FinancialContract!]! @derivedFrom(field: "collateralToken")
}
