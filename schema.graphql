type User @entity {
  id: ID!

  votingTokenBalance: BigDecimal!

  votingTokenBalanceRaw: BigInt!

  votesCommited: [CommitedVote!]! @derivedFrom(field: "voter")

  votesRevealed: [RevealedVote!]! @derivedFrom(field: "voter")

  deployedContracts: [FinancialContract!]! @derivedFrom(field: "deployer")
}

type InterfaceImplementation @entity {
  "Name of the Interface implemented on this contract"
  id: ID!

  address: Bytes!
}

type PriceIdentifier @entity {
  id: ID!

  isSupported: Boolean!

  priceRequests: [PriceRequest!]! @derivedFrom(field: "identifier")
}

type PriceRequest @entity {
  "ID is the PriceIdentifier ID + the timestamp"
  id: ID!

  isResolved: Boolean!

  price: BigInt

  latestRound: PriceRequestRound!

  time: BigInt!

  identifier: PriceIdentifier!

  resolutionTransaction: Bytes

  resolutionTimestamp: BigInt

  resolutionBlock: BigInt

  rounds: [PriceRequestRound!]! @derivedFrom(field: "request")

  commitedVotes: [CommitedVote!]! @derivedFrom(field: "request")

  revealedVotes: [RevealedVote!]! @derivedFrom(field: "request")

  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "request")
}

type PriceRequestRound @entity {
  "ID is the PriceIdentifier ID + the timestamp + the roundId"
  id: ID!

  request: PriceRequest!

  identifier: PriceIdentifier!

  time: BigInt!

  roundId: BigInt!

  snapshotId: BigInt

  totalVotesRevealed: BigInt!

  totalRewardsClaimed: BigInt!

  totalSupplyAtSnapshot: BigInt

  "Ratio of the total supply of tokens that were weighted on this vote"
  tokensWeightedOverTotalSupplyRaw: BigDecimal

  "Percentage of the total supply of tokens that were weighted on this vote"
  tokensWeightedOverTotalSupply: BigDecimal

  commitedVotes: [CommitedVote!]! @derivedFrom(field: "round")

  revealedVotes: [RevealedVote!]! @derivedFrom(field: "round")

  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "round")
}

type CommitedVote @entity {
  "Commited votes won't show the price until a reveal happens and a RevealedVote is created"
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  encryptedVoteData: Bytes

  voter: User!
}

type RevealedVote @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  price: BigInt!

  voter: User!

  numTokens: BigInt!
}

type RewardsClaimed @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  claimer: User!

  numTokens: BigInt!
}

type FinancialContract @entity {
  "Blockchain address of the contract"
  id: ID!

  creator: ContractCreator

  deployer: User

  address: Bytes!

  collateralToken: Token

  syntheticToken: Token

  collateralRequirement: BigDecimal

  expirationTimestamp: BigInt

  totalTokensOutstanding: BigDecimal

  rawTotalPositionCollateral: BigDecimal

  cumulativeFeeMultiplier: BigDecimal

  globalCollateralizationRatio: BigDecimal

  totalSyntheticTokensCreated: BigDecimal!

  totalSyntheticTokensBurned: BigDecimal!

  positionManagerEvents: [PositionManagerEvent!]! @derivedFrom(field: "contract")

  parties: [Party!]! @derivedFrom(field: "contract")

  sponsorPositions: [SponsorPosition!]! @derivedFrom(field: "contract")
}

type Sponsor @entity {
  id: ID!

  positions: [SponsorPosition!]! @derivedFrom(field: "sponsor")
}

type SponsorPosition @entity {
  "Sponsor ID + FinancialContract ID"
  id: ID!

  contract: FinancialContract!

  sponsor: Sponsor!

  rawCollateral: BigDecimal!

  tokensOutstanding: BigDecimal!

  isEnded: Boolean!
}

interface PositionManagerEvent {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type PositionCreatedEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!

  tokenAmount: BigInt!
}

type SettleExpiredPositionEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  caller: Bytes!

  collateralReturned: BigInt!

  tokensBurned: BigInt!
}

type RedeemEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!

  tokenAmount: BigInt!
}

type DepositEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!
}

type WithdrawalEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!
}

type ContractCreator @entity {
  "This entity represent a single contract creator (EMP Creator). The id is the blockchain address of the EMPCreator"
  id: ID!

  isRemoved: Boolean!

  manager: Bytes
}

type Party @entity {
  "Address"
  id: ID!

  contract: FinancialContract!

  isRemoved: Boolean!
}

type Store @entity {
  "Entity that stores the global settings (fees, rates, and more)"
  id: ID!

  gatPercentage: BigDecimal

  inflationPercentage: BigDecimal

  regularFee: BigDecimal!

  "FinalFees are differenty for each currency available. We track them separately on the FinalFeePair entity"
  finalFees: [FinalFeePair!]! @derivedFrom(field: "store")

  weeklyDelayFee: BigDecimal!

  totalFeesPaid: BigInt!

  regularFeesPaid: BigInt!

  finalFeesPaid: BigInt!

  events: [StoreEvent!]! @derivedFrom(field: "store")
}

type FinalFeePair @entity {
  id: ID!

  currency: Token!

  store: Store!

  fee: BigDecimal!
}

interface StoreEvent {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type FinalFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type RegularFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  regularFee: BigInt!

  lateFee: BigInt!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type Token @entity {
  id: ID!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!
}

enum LiquidationStatus {
  PreDispute
  PendingDispute
  DisputeSucceeded
  DisputeFailed
}

type Liquidation @entity {
  "Liquidation ID is a combination of the Sponsor ID + the internal liquidation id"
  id: ID!

  status: LiquidationStatus!

  sponsor: Sponsor!

  liquidator: User!

  disputer: User

  liquidationId: BigInt!

  tokensLiquidated: BigDecimal!

  lockedCollateral: BigDecimal!

  liquidatedCollateral: BigDecimal!

  disputeBondAmount: BigDecimal

  disputeSucceeded: Boolean

  amountWithdrawn: BigDecimal

  events: [LiquidationEvent!]! @derivedFrom(field: "liquidation")
}

interface LiquidationEvent {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!
}

type LiquidationCreatedEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  liquidator: Bytes!

  liquidationId: BigInt!

  tokensLiquidated: BigInt!

  lockedCollateral: BigInt!

  liquidatedCollateral: BigInt!
}

type LiquidationDisputedEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  liquidator: Bytes!

  disputer: Bytes!

  liquidationId: BigInt!

  disputeBondAmount: BigInt!
}

type LiquidationWithdrawnEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  amountWithdrawn: BigInt!
}

type LiquidationDisputeSettledEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  caller: Bytes!

  sponsor: Bytes!

  liquidator: Bytes!

  disputer: Bytes!

  liquidationId: BigInt!

  disputeSucceeded: Boolean!
}
