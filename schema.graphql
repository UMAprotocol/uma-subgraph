type User @entity {
  "Utility entity that links data from a single ethereum address. Id of the entity is the ethereum address itself"
  id: ID!

  address: Bytes!

  "Reference to the related entity that tracks voting token balance. If null then this user is not a token holder"
  votingTokenHolder: VotingTokenHolder

  votesCommited: [CommittedVote!]! @derivedFrom(field: "voter")

  votesRevealed: [RevealedVote!]! @derivedFrom(field: "voter")

  deployedContracts: [FinancialContract!]! @derivedFrom(field: "deployer")

  "List of all the liquidations where this user acted as disputer"
  liquidationsDisputed: [Liquidation!]! @derivedFrom(field: "disputer")

  "List of all the liquidations that this user triggered as a liquidator"
  liquidationsTriggered: [Liquidation!]! @derivedFrom(field: "liquidator")
}

type VotingTokenHolder @entity {
  "ID = Ethereum address"
  id:ID!

  address: Bytes!

  votingTokenBalance: BigDecimal!

  votingTokenBalanceRaw: BigInt!
}

type InterfaceImplementation @entity {
  "Name of the Interface implemented on this contract"
  id: ID!

  address: Bytes!
}

type PriceIdentifier @entity {
  id: ID!

  "Depicts whether this PriceIdentifier is currently among the identifiers supported on the whitelist. Will only be false if it was removed from the whitelist."
  isSupported: Boolean!

  "List of all the PriceRequest entities related to this particular PriceIdentifier."
  priceRequests: [PriceRequest!]! @derivedFrom(field: "identifier")
}

type PriceRequest @entity {
  "ID is the PriceIdentifier ID + the timestamp"
  id: ID!

  "Depicts whether the request has been resolved"
  isResolved: Boolean!

  "Price resolved for this request"
  price: BigInt

  "PriceRequestRound entity corresponding to the last round of voting"
  latestRound: PriceRequestRound!

  "Timestamp when the PriceRequest was requested"
  time: BigInt!

  "PriceIdentifier for the request"
  identifier: PriceIdentifier!

  "Transaction where the resolution of the request took place"
  resolutionTransaction: Bytes

  "Timestamp when the resolution of the request took place"
  resolutionTimestamp: BigInt

  "Block number when the resolution of the request took place"
  resolutionBlock: BigInt

  "List of all the rounds involved in this PriceRequest"
  rounds: [PriceRequestRound!]! @derivedFrom(field: "request")

  "List of all the votes committed on this request"
  committedVotes: [CommittedVote!]! @derivedFrom(field: "request")

  "List of all the votes revealed on this request"
  revealedVotes: [RevealedVote!]! @derivedFrom(field: "request")

  "List of all the rewards claimed events for this request"
  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "request")
}

type PriceRequestRound @entity {
  "ID is the PriceIdentifier ID + the timestamp + the roundId"
  id: ID!

  request: PriceRequest!

  identifier: PriceIdentifier!

  time: BigInt!

  roundId: BigInt!

  snapshotId: BigInt

  "Total amount of users who voted on this round"
  votersAmount: BigDecimal!

  "Total amount of users who claimed rewards on this round"
  claimedAmount: BigDecimal!

  totalVotesRevealed: BigDecimal!

  totalRewardsClaimed: BigDecimal!

  totalSupplyAtSnapshot: BigDecimal

  "Ratio of the total supply of tokens that were weighted on this vote"
  tokenVoteParticipationRatio: BigDecimal

  "Percentage of the total supply of tokens that were weighted on this vote"
  tokenVoteParticipationPercentage: BigDecimal

  "Ratio of correct voters over total voters on this price request"
  eligibleForRewardsRatio: BigDecimal

  "Percentage of correct voters over total voters on this price request"
  eligibleForRewardsPercentage: BigDecimal

  "Ratio of correct voters who claimed their rewards"
  claimedRatio: BigDecimal

  "Percentage of correct voters who claimed their rewards"
  claimedPercentage: BigDecimal

  "gatPercentage expressed exactly as in the contract. 1 = 100%"
  gatPercentageRaw: BigDecimal

  "gatPercentage expressed as a percentage value"
  gatPercentage: BigDecimal

  "inflationRate expressed exactly as in the contract. 1 = 100%"
  inflationRateRaw: BigDecimal

  "inflationRate expressed as a percentage value"
  inflationRate: BigDecimal

  winnerGroup: VoterGroup

  committedVotes: [CommittedVote!]! @derivedFrom(field: "round")

  revealedVotes: [RevealedVote!]! @derivedFrom(field: "round")

  groups: [VoterGroup!]! @derivedFrom(field: "round")

  rewardsClaimed: [RewardsClaimed!]! @derivedFrom(field: "round")
}

type VoterGroup @entity {
  "Just a helper entity to group voters who voted the same price result. ID is composed of round ID + voted price"
  id: ID!

  price: BigInt!

  round: PriceRequestRound!

  votes: [RevealedVote!]! @derivedFrom(field: "group")

  totalVoteAmount: BigDecimal!

  votersAmount: BigDecimal!

  won: Boolean!
}

type CommittedVote @entity {
  "Commited votes won't show the price until a reveal happens and a RevealedVote is created"
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  encryptedVoteData: Bytes

  voter: User!
}

type RevealedVote @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  price: BigInt!

  voter: User!

  numTokens: BigInt!

  group: VoterGroup!
}

type RewardsClaimed @entity {
  id: ID!

  identifier: PriceIdentifier!

  request: PriceRequest!

  time: BigInt!

  round: PriceRequestRound!

  claimer: User!

  "NumTokens will be 0 if the claim is not 'valid'. This can happen if the function was called for a voter who didn't get the correct vote for example."
  numTokens: BigInt!
}

type FinancialContract @entity {
  "Blockchain address of the contract"
  id: ID!

  "ExternalMultiPartyCreator contract used to create this contract"
  creator: ContractCreator

  "User that deployed the contract"
  deployer: User

  "Address of the contract"
  address: Bytes!

  "Token used as collateral for this contract"
  collateralToken: Token

  "Synthetic token for this contract"
  syntheticToken: Token

  "Minimum required collateral for proper collateralization"
  collateralRequirement: BigDecimal

  "Expiration timestamp of the financial contract."
  expirationTimestamp: BigInt

  totalTokensOutstanding: BigDecimal

  rawTotalPositionCollateral: BigDecimal

  totalPositionCollateral: BigDecimal

  rawLiquidationCollateral: BigDecimal

  cumulativeFeeMultiplier: BigDecimal

  globalCollateralizationRatio: BigDecimal

  totalSyntheticTokensCreated: BigDecimal!

  totalSyntheticTokensBurned: BigDecimal!

  totalCollateralDeposited: BigDecimal!

  totalCollateralWithdrawn: BigDecimal!

  positionManagerEvents: [PositionManagerEvent!]! @derivedFrom(field: "contract")

  sponsorPositions: [SponsorPosition!]! @derivedFrom(field: "contract")
}

type Sponsor @entity {
  "A token sponsor is someone who holds positions on financial contracts."
  id: ID!

  positions: [SponsorPosition!]! @derivedFrom(field: "sponsor")
}

type SponsorPosition @entity {
  "Sponsor ID + FinancialContract ID"
  id: ID!

  "Contract where the sponsor has a position"
  contract: FinancialContract!

  "Sponsor who has the position"
  sponsor: Sponsor!

  "Collateral used to back the position"
  rawCollateral: BigDecimal!

  collateral: BigDecimal!

  "Synthetic token outstanding"
  tokensOutstanding: BigDecimal!

  "Depicts whether the position has been ended or not"
  isEnded: Boolean!

  withdrawalRequestPassTimestamp: BigInt

  withdrawalRequestAmount: BigDecimal

  transferPositionRequestPassTimestamp: BigInt
}

interface PositionManagerEvent {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type PositionCreatedEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!

  tokenAmount: BigInt!
}

type SettleExpiredPositionEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  caller: Bytes!

  collateralReturned: BigInt!

  tokensBurned: BigInt!
}

type RedeemEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!

  tokenAmount: BigInt!
}

type DepositEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!
}

type WithdrawalEvent implements PositionManagerEvent @entity {
  id: ID!

  contract: FinancialContract!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  sponsor: Sponsor!

  collateralAmount: BigInt!

  wasRequested: Boolean!
}

type ContractCreator @entity {
  "This entity represent a single contract creator (EMP Creator). The id is the blockchain address of the EMPCreator"
  id: ID!

  "Whether or not this creator has been removed from the whitelist of creators"
  isRemoved: Boolean!

  "Manager of the contract creator address"
  manager: Bytes

  "List of all the contracts created from this Creator"
  contractsCreated: [FinancialContract!]! @derivedFrom(field: "creator")
}

type Store @entity {
  "Entity that stores the global settings (fees, rates, and more)"
  id: ID!

  gatPercentage: BigDecimal

  inflationPercentage: BigDecimal

  regularFee: BigDecimal!

  "FinalFee values are different for each currency available. We track them separately on the FinalFeePair entity"
  finalFees: [FinalFeePair!]! @derivedFrom(field: "store")

  weeklyDelayFee: BigDecimal!

  totalFeesPaid: BigInt!

  regularFeesPaid: BigInt!

  finalFeesPaid: BigInt!

  "Address of the withdrawer as of the last withdraw"
  withdrawer: Bytes

  totalWithdrawn: BigDecimal!

  events: [StoreEvent!]! @derivedFrom(field: "store")
}

type FinalFeePair @entity {
  id: ID!

  currency: Token!

  store: Store!

  fee: BigDecimal!
}

interface StoreEvent {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type FinalFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type RegularFeePaidEvent implements StoreEvent @entity {
  id: ID!

  store: Store!

  contract: FinancialContract!

  regularFee: BigInt!

  lateFee: BigInt!

  totalPaid: BigInt!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!
}

type Token @entity {
  id: ID!

  address: Bytes!

  decimals: Int!

  name: String!

  symbol: String!

  "Depicts whether this token is whitelisted in the AddressWhitelist contract"
  isOnWhitelist: Boolean!

  "Depicts whether this token is being indexed by the subgraph as a CollateralToken for at least one FinancialContract"
  indexingAsCollateral: Boolean!

  "Depicts whether this token is being indexed by the subgraph as a FeeToken for the Store entity"
  indexingAsFeeToken: Boolean!
}

enum LiquidationStatus {
  PreDispute
  PendingDispute
  DisputeSucceeded
  DisputeFailed
}

type Liquidation @entity {
  "Liquidation ID is a combination of the Sponsor ID + the internal liquidation id"
  id: ID!

  "Current status of the liquidation"
  status: LiquidationStatus!

  "Sponsor who is having its position liquidated"
  sponsor: Sponsor!

  "User who is liquidating the position"
  liquidator: User!

  "User who is disputing the liquidation"
  disputer: User

  "Internal ID of the liquidationData"
  liquidationId: BigInt!

  tokensLiquidated: BigDecimal!

  lockedCollateral: BigDecimal!

  liquidatedCollateral: BigDecimal!

  disputeBondAmount: BigDecimal

  disputeSucceeded: Boolean

  amountWithdrawn: BigDecimal

  events: [LiquidationEvent!]! @derivedFrom(field: "liquidation")
}

interface LiquidationEvent {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!
}

type LiquidationCreatedEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  liquidator: Bytes!

  liquidationId: BigInt!

  tokensLiquidated: BigInt!

  lockedCollateral: BigInt!

  liquidatedCollateral: BigInt!
}

type LiquidationDisputedEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  liquidator: Bytes!

  disputer: Bytes!

  liquidationId: BigInt!

  disputeBondAmount: BigInt!
}

type LiquidationWithdrawnEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  sponsor: Bytes!

  amountWithdrawn: BigInt!
}

type LiquidationDisputeSettledEvent implements LiquidationEvent @entity {
  id: ID!

  tx_hash: String!

  block: BigInt!

  timestamp: BigInt!

  liquidation: Liquidation!

  caller: Bytes!

  sponsor: Bytes!

  liquidator: Bytes!

  disputer: Bytes!

  liquidationId: BigInt!

  disputeSucceeded: Boolean!
}

type Proposal @entity {
  id: ID!

  request: PriceRequest!

  transactions: [ProposalTransaction!]! @derivedFrom(field: "proposal")

  transactionAmount: Int!
}

type ProposalTransaction @entity {
  id: ID!

  proposal: Proposal!

  to: Bytes!

  value: BigInt!

  data: Bytes!

  isExecuted: Boolean!
}
